# NB: don't set `language: haskell` here
language: c

# See also https://github.com/hvr/multi-ghc-travis for more information

# The following lines enable several GHC versions and/or HP versions
# to be tested; often it's enough to test only against the last
# release of a major GHC version. Setting HPVER implictly sets
# GHCVER. Omit lines with versions you don't need/want testing for.
env:
 - CABALVER=1.22 GHCVER=7.10.3
 - CABALVER=1.24 GHCVER=8.0.1

# Note: the distinction between `before_install` and `install` is not
#       important.
before_install:
 - case "$HPVER" in
    "") ;;

    "2014.2.0.0")
      export CABALVER=1.18 ;
      export GHCVER=7.8.3 ;
      echo "constraints:async==2.0.1.5,attoparsec==0.10.4.0,case-insensitive==1.1.0.3,fgl==5.5.0.1,GLUT==2.5.1.1,GLURaw==1.4.0.1,haskell-src==1.0.1.6,hashable==1.2.2.0,html==1.0.1.2,HTTP==4000.2.10,HUnit==1.2.5.2,mtl==2.1.3.1,network==2.4.2.3,OpenGL==2.9.2.0,OpenGLRaw==1.5.0.0,parallel==3.2.0.4,parsec==3.1.5,primitive==0.5.2.1,QuickCheck==2.6,random==1.0.1.1,regex-base==0.93.2,regex-compat==0.95.1,regex-posix==0.95.2,split==0.2.2,stm==2.4.2,syb==0.4.1,text==1.1.0.0,transformers==0.3.0.0,unordered-containers==0.2.4.0,vector==0.10.9.1,xhtml==3000.2.1,zlib==0.5.4.1" > cabal.config ;;

    *)
      export GHCVER=unknown ;
      echo "unknown/invalid Haskell Platform requested" ;
      exit 1 ;;

   esac

 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - cabal install --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 # -v2 provides useful information for debugging
 - cabal configure --enable-tests --enable-benchmarks -v2

 # this builds all libraries and executables
 # (including tests/benchmarks)
 - cabal build

 - cabal check

 # tests that a source-distribution can be generated
 - cabal sdist

 # check that the generated source-distribution can be built & installed
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
   (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

notifications:
  email: false
  slack:
    secure: rR3rUg46Ryj7tTRykonjh/t70ZxX2e+K8uT3OH8ayNk8pArQzEnKu34Xdtt8l7R91QvvB3wwTqZKtNJAHu8tHRdi+cgjVaQACczuOkJzd/AmaDj9kEVOVDBirldwBSs/PYISzsm1L/VWRVO9P0bZpDwrQsZpV4jGKfg1UttqyV1R2CK2/y1wlD2n2LwDhtNih5mVZ/PfXT2FnUCklz7W+rFiPs8mohwN5U2tcgB/GdY77na0WmrL/MYpo3oVOiGvZiKTthYcOElJ/tR1RiKD2rPVwssNyY2LzJDFuxcaszg/s47DcUInIOGLHNlwCBVN26V1080Sz0Kz2mdGAd/NPMivkg++5VHkxjQYixmJkfhrIstnFHUMkxWj8HzpbUxE9+T592XF/mPJFAx53vNa0h6iIBi8pa+0XOdpJ7JtXCq3d251V6lY67SLF0kMH3hzYq7RXsUtx0PtN8Eu2FWcradKPBgMujsR4WjMpH90mjVPxA3TIPZaRfHXSqOUlLVkUuHXlOYysFqsZWfrsjUMewwEWgv9louEUDq74nuaCNaEh17z2b3+j5DhFcYjGkO29XnRvQi1pvF/2DgHDN6UBtKsz3VPQ2qozQPHxRA1uXFKQQaVIzsvbVpoE8i1y/Qo+NVWE+/LnQiN1uL3QLtrTVuaUAA6/RenScocx4bRt0w=
