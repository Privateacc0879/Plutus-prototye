# This Travis job script has been generated by a script via
#
#   make_travis_yml_2.hs 'plutus-prototype.cabal'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

matrix:
  include:
    - compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}
    - compiler: "ghc-8.0.1"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.1], sources: [hvr-ghc]}}

before_install:
 - HC=${CC}
 - unset CC
 - PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$PATH
 - PKGNAME='plutus-prototype'

install:
 - cabal --version
 - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - BENCH=${BENCH---enable-benchmarks}
 - TEST=${TEST---enable-tests}
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - rm -fv cabal.project.local
 - "echo 'packages: .' > cabal.project"
 - rm -f cabal.project.freeze
 - cabal new-build -w ${HC} ${TEST} ${BENCH} --dep -j2
 - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --dep -j2

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - rm -rf dist/
 - cabal sdist # test that a source-distribution can be generated
 - cd dist/
 - SRCTAR=(${PKGNAME}-*.tar.gz)
 - SRC_BASENAME="${SRCTAR/%.tar.gz}"
 - tar -xvf "./$SRC_BASENAME.tar.gz"
 - cd "$SRC_BASENAME/"
## from here on, CWD is inside the extracted source-tarball
 - rm -fv cabal.project.local
 - "echo 'packages: .' > cabal.project"
 # this builds all libraries and executables (without tests/benchmarks)
 - rm -f cabal.project.freeze
 - cabal new-build -w ${HC} --disable-tests --disable-benchmarks
 # this builds all libraries and executables (including tests/benchmarks)
 # - rm -rf ./dist-newstyle
 - cabal new-build -w ${HC} ${TEST} ${BENCH}

 # there's no 'cabal new-test' yet, so let's emulate for now
 - TESTS=( $(awk 'tolower($0) ~ /^test-suite / { print $2 }' *.cabal) )
 - if [ "$TEST" != "--enable-tests" ]; then TESTS=(); fi
 - shopt -s globstar;
   RC=true; for T in ${TESTS[@]}; do echo "== $T ==";
   if dist-newstyle/build/**/$SRC_BASENAME/**/build/$T/$T; then echo "= $T OK =";
   else echo "= $T FAILED ="; RC=false; fi; done; $RC

notifications:
  email: false
  slack:
    secure: rR3rUg46Ryj7tTRykonjh/t70ZxX2e+K8uT3OH8ayNk8pArQzEnKu34Xdtt8l7R91QvvB3wwTqZKtNJAHu8tHRdi+cgjVaQACczuOkJzd/AmaDj9kEVOVDBirldwBSs/PYISzsm1L/VWRVO9P0bZpDwrQsZpV4jGKfg1UttqyV1R2CK2/y1wlD2n2LwDhtNih5mVZ/PfXT2FnUCklz7W+rFiPs8mohwN5U2tcgB/GdY77na0WmrL/MYpo3oVOiGvZiKTthYcOElJ/tR1RiKD2rPVwssNyY2LzJDFuxcaszg/s47DcUInIOGLHNlwCBVN26V1080Sz0Kz2mdGAd/NPMivkg++5VHkxjQYixmJkfhrIstnFHUMkxWj8HzpbUxE9+T592XF/mPJFAx53vNa0h6iIBi8pa+0XOdpJ7JtXCq3d251V6lY67SLF0kMH3hzYq7RXsUtx0PtN8Eu2FWcradKPBgMujsR4WjMpH90mjVPxA3TIPZaRfHXSqOUlLVkUuHXlOYysFqsZWfrsjUMewwEWgv9louEUDq74nuaCNaEh17z2b3+j5DhFcYjGkO29XnRvQi1pvF/2DgHDN6UBtKsz3VPQ2qozQPHxRA1uXFKQQaVIzsvbVpoE8i1y/Qo+NVWE+/LnQiN1uL3QLtrTVuaUAA6/RenScocx4bRt0w=

# EOF
